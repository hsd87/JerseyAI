Here‚Äôs a comprehensive and structured prompt you can give to the Replit agent to implement your advanced prompt-to-image pipeline for the ProJersey application:

‚∏ª

üß† Prompt for Replit Agent

We are building an AI-powered D2C product design platform called ProJersey. The user fills out a detailed design form, and our system generates a professional jersey mockup using a fine-tuned Flux 1.1 Pro Ultra model hosted on Replicate.

‚∏ª

üéØ Objective

Create a structured pipeline with the following flow:
	1.	User completes the form.
	2.	Form values are sent to our OpenAI prompt generator endpoint, which transforms the inputs into a detailed descriptive prompt (based on a sample format).
	3.	The rewritten prompt is then sent to our Replicate-hosted model via API.
	4.	The response image is returned and shown to the user.

We are already using:
	‚Ä¢	React + Zustand on the frontend
	‚Ä¢	FastAPI backend
	‚Ä¢	Replicate for image generation
	‚Ä¢	OpenAI for prompt rewriting

‚∏ª

üõ†Ô∏è What You Need to Implement

1. üì¶ Create Backend Prompt Generator Module
	‚Ä¢	Endpoint: POST /api/prompt/generate
	‚Ä¢	Input: User form fields (as JSON)
	‚Ä¢	Use OpenAI‚Äôs API (gpt-4 or gpt-3.5) to rewrite the prompt into our structured format using the provided prompt template below
	‚Ä¢	Output: Final descriptive prompt as a string
	‚Ä¢	Save successful prompts into a log for later analysis (R&D/fine-tuning)

‚∏ª

2. üß† Sample Prompt Template (Use as OpenAI Guidance)

Prompt:
A pfsoccerkit, displayed in two cleanly aligned angles: front view (left) and back view (right), against a crisp white studio background...

(‚Üê Refer to full structured prompt provided earlier)

Instructions:
- Map form inputs like primaryColor, secondaryColor, collarType, sleeveStyle, fabricTexture, patternStyle, etc. into this descriptive template.
- The output should preserve the structure and language quality shown in the sample.
- Ensure the formatting includes sections like üßç‚Äç‚ôÇÔ∏è Garment Structure, üßµ Fabric, üé® Colors, etc.



‚∏ª

3. üîÅ Connect Prompt to Image Generation

After the prompt is generated:
	‚Ä¢	Use this format to call Replicate:

POST https://api.replicate.com/v1/predictions
Authorization: Token <REPLICATE_API_KEY>
{
  "version": "<flux-model-version-id>",
  "input": {
    "prompt": "<generated_prompt>",
    "num_outputs": 1,
    "image_dimensions": "1024x1024"
  }
}

	‚Ä¢	Save both prompt and resulting image URL for record
	‚Ä¢	Return the image back to the frontend

‚∏ª

4. üñ•Ô∏è Frontend Integration
	‚Ä¢	Modify design-form.tsx to:
	‚Ä¢	Submit form to /api/prompt/generate
	‚Ä¢	Send the returned prompt to the Replicate API via /api/generate-image
	‚Ä¢	Display the final image in design-results.tsx
	‚Ä¢	Save state via Zustand or local storage

‚∏ª

‚ö†Ô∏è Edge Cases
	‚Ä¢	If OpenAI prompt generation fails: fallback to raw prompt composed from user form
	‚Ä¢	If image generation fails: show a default test image + error message
	‚Ä¢	Add loading states for both prompt + image steps

‚∏ª

‚úÖ Completion Checklist
	‚Ä¢	POST /api/prompt/generate implemented with OpenAI
	‚Ä¢	Prompt template integrated
	‚Ä¢	Image generation endpoint updated to accept the new structured prompt
	‚Ä¢	Frontend wired to new backend endpoints
	‚Ä¢	Prompt and image stored in user‚Äôs session or DB
	‚Ä¢	Error handling and fallback logic added
	‚Ä¢	Loading indicators for UX during async actions

‚∏ª

Please execute this in your next steps. After this is done, we will proceed with:
	‚Ä¢	Editable design overlays (logo/name/number)
	‚Ä¢	Order summary generation
	‚Ä¢	Checkout flow and PDF logs

Let me know once the prompt-to-image loop is complete and working end-to-end.