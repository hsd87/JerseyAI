ou are building the backend + frontend logic for a sports kit configuration platform called **ProJersey**.

You are provided with 3 CSV files:
1. **Form_Structure_Config - ai designer form config.csv**  
   ‚Üí This defines the form fields and options per sport and kit type (e.g., jersey + shorts).
2. **Form_Structure_Config - Sheet3.csv**  
   ‚Üí This outlines each individual SKU (e.g., PFJS01 = Jersey), its form inputs, fabric, fit, and whether it supports addons.
3. **Form_Structure_Config - sku price configprice.csv**  
   ‚Üí This provides pricing, allowed add-ons, available sizes, and which SKU is allowed for AI configuration.

---

### üèóÔ∏è Goal:

Build a modular system that allows users to:
1. **Start with one component** (e.g., Jersey)
2. **Configure it with a simplified form**
3. **Optionally add matching products** (like shorts, jacket, socks)
4. **Get real-time price calculation** based on:
   - Base product price
   - Add-ons
   - Quantity
   - Fabric or style upcharges (optional)

---

### ‚úÖ BACKEND TASKS

1. **Parse the 3 CSV files**
   - Store dataframes as:
     - `form_config_df`
     - `sku_details_df`
     - `sku_price_df`

2. **Create a unified `product_schema` generator**
   - Input: SKU or product type (e.g., "Jersey")
   - Output: JSON with allowed fields: gender, colors, sleeve, collar, pattern, etc.
   - Pull values from `form_config_df` and `sku_details_df`

3. **Define a `kit_mapping` function**
   - Input: ‚ÄúJersey + Shorts‚Äù
   - Output: `[PFJS01, PFSS02]` (lookup in `sku_details_df`)

4. **Build `/configure-kit` endpoint**
   - Input:
     ```json
     {
       "sport": "Soccer",
       "kit_type": "jersey + shorts",
       "quantity": 12,
       "selected_addons": ["socks", "kitbag"],
       "options": {
         "sleeve": "short",
         "collar": "v-neck",
         "pattern": "gradient",
         "fabric": "POLYDRY",
         "fit": "athletic"
       }
     }
     ```
   - Output:
     - List of matched SKUs
     - Pricing per item
     - Add-on pricing
     - Quantity-based discount
     - Final total

5. **Support auto-suggestion of matching products**
   - From base kit, recommend related SKUs
   - Pull ‚Äúmatching‚Äù logic from product type categories

---

### ‚úÖ FRONTEND (UI LOGIC)

1. **Step 1: Pick Base Product**
   - Load sports list ‚Üí kit types per sport
   - Show dropdown: ‚ÄúStart with Jersey / Jacket / Shorts‚Äù

2. **Step 2: Dynamic Form Load**
   - Based on selection, fetch schema via `/get-schema?sku=PFJS01`
   - Render all matching fields with default values

3. **Step 3: Add Matching Items**
   - Fetch recommended products for ‚Äújersey + shorts‚Äù
   - Use same fabric/style/colors by default

4. **Step 4: Quantity & Price Summary**
   - Enter quantity
   - Call `/configure-kit`
   - Show price breakdown + editable summary

---

### ‚úÖ OPTIONAL TASKS (ADVANCED LATER)

- Add PDF Generator `/generate-summary-pdf`
- Store config in session or db
- Add AI preview of jersey

---

### üí° Additional Implementation Notes

- Use FastAPI or Flask for backend
- Store configs as `.json` for frontend logic
- All SKUs and logic should be modular
- Keep frontend form logic driven by config
- Ensure form structure is flexible for future sports or products